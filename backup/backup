#! /usr/bin/env python3

import os
import time
import datetime
import argparse

from methods.bcolors import bcolors
from methods.add import write
from methods.clean import remove_duplicate

# FUNCTIONS >>>>>
def print_menu():
    print(bcolors.HEADER + '\n-------- Texup: backup manager by GTex --------' + bcolors.ENDC)
    print('Hint: You can directly run "backup --run OPTION"\n')
    print(bcolors.UNDERLINE+'OPTIONS:'+bcolors.ENDC)
    print(bcolors.OKGREEN + 'full:' + bcolors.ENDC + ' save and clean data')
    print(bcolors.OKGREEN + 'save:' + bcolors.ENDC + ' save selected folder')
    print(bcolors.OKGREEN + 'clean:' + bcolors.ENDC + ' delete old files and folders')
    print(bcolors.OKGREEN + 'exit:' + bcolors.ENDC + ' stop program')
    return

def get_user_input():
    while True:
        user_input = input(bcolors.OKGREEN + '\nOption: ' + bcolors.ENDC)
        if user_input == 'exit' or user_input=='full' or user_input=='save' or user_input=='clean':
            return user_input
        else:
            print(bcolors.FAIL + 'Not a valid option: ' + user_input + bcolors.ENDC)

def stop():
    # exit program
    print("\nThanks for using Texup!")
    time.sleep(2)
    exit()
# <<<<< FUNCTIONS

# get total path to this file
FILEPATH = os.path.abspath(os.path.dirname(__file__))

# GET ARGUMENTS
parser = argparse.ArgumentParser(description='Texup')
parser.add_argument('-r', '--run', action="store", dest='run', default='menu', help='OPTIONS: "full", "save", "clean"')
args = parser.parse_args()

# check if argument exist or get argument from user input
if args.run == 'menu':
    print_menu()
    user_input = get_user_input()
elif args.run=='full' or args.run=='save' or args.run=='clean':
    print('test')
    user_input = args.run
else:
    raise(parser.error(bcolors.FAIL + args.run + bcolors.ENDC + ' is not a valid option'))
    stop()

# start time

time_init = datetime.datetime.now()
# execute program
if user_input == 'full':
    print(bcolors.HEADER + '\nStep 1: Save new/changed folders and files...' + bcolors.ENDC)
    write(FILEPATH)
    print(bcolors.HEADER + '\nStep 2: Delete old folders and files...' + bcolors.ENDC)
    remove_duplicate(FILEPATH)
elif user_input == 'save':
    print(bcolors.HEADER + '\nSave new/changed folders and files...' + bcolors.ENDC)
    write(FILEPATH)
elif user_input == 'clean':
    print(bcolors.HEADER + '\nDelete old folder and files...' + bcolors.ENDC)
    remove_duplicate(FILEPATH)
elif user_input == 'exit':
    stop()

# stop time and print write and clean duration
time_final = datetime.datetime.now()
time_dif = (time_final-time_init).seconds #in seconds
time_h = int(time_dif/60)
time_m = time_dif % 60
print(bcolors.OKBLUE, '\nDuration: ', time_h, 'minutes, ', time_m, ' seconds', bcolors.ENDC)

stop()